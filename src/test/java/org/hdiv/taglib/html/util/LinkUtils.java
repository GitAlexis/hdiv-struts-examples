/*
 * Copyright 2004-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hdiv.taglib.html.util;

import junit.framework.Assert;

/**
 * Link's utility class.
 */
public class LinkUtils {
		
	/**
	 * As the result obtained <code>compareTo</code> contains _HDIV_STATE parameter
	 * added by HDIV, we can't do the verification as it is. We must check if the
	 * html code obtained <code>compareTo</code> until this parameter is what we
	 * expect, and also that the html code generated after _HDIV_STATE parameter is
	 * also what we expect.
	 * 
	 * @param expected Expected HTML
	 * @param compareTo HTML generated by HDIV
	 */
	public static void compareLinks(String expected, String compareTo) {
		
		int aindex = 0;
		int moreLinks = 0;
		do {	
			// we ask if more than one link exists. For this, we ask if the tag </a>
			// is the last string written by the tag LinktagHDIV
			moreLinks = expected.indexOf("</a>", aindex) + 4;
			
			// we skip the first double quote
			int doubleQuoted = expected.indexOf("\"", (expected.indexOf("<a href", aindex) + 9));
			
			// we search for an anchor in the link
			int anchor = expected.indexOf("#", (expected.indexOf("<a href", aindex) + 9));
		
			String firstPart = null;
			String secondPart = null;
		
			if ((anchor > 0) && (anchor < doubleQuoted)) {
				firstPart = expected.substring(expected.indexOf("<a", aindex), anchor);
				String anchorPart = expected.substring(anchor, doubleQuoted);
				secondPart = anchorPart + expected.substring(doubleQuoted, moreLinks);
			} else {
				firstPart = expected.substring(expected.indexOf("<a", aindex), doubleQuoted);
				secondPart = expected.substring(doubleQuoted + 1, moreLinks);
			}	
		
			Assert.assertTrue(compareTo.indexOf(firstPart) >= 0);
			Assert.assertTrue(compareTo.indexOf(secondPart) >= 0);	

			aindex = aindex + moreLinks;
			
		} while (moreLinks < expected.length());		
		
	}
	
}
